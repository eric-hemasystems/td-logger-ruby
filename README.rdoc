= Treasure Data logging library for Rails

== About

This gem is a *logging* *library* *for* *Treasure* *Data*. The events logged by this module will be uploaded into the cloud. There're two ways to upload:

* 1) direct upload from applications: app -> cloud (used by default). This option is easier to configure and setup, but it requires extra memory in the application processes.
* 2) in-direct upload from td-agent: app -> td-agent -> cloud. This option requires extra steps to install the daemons into your cluster, but lowers the logging impact on your applications. 

You can choose which method to use in the config file as described below.

== Installation

Add the following line to your Gemfile:

    gem 'td-logger'

For Rails 2.x (not tested) without Bundler,
edit +environment.rb+ and add to the initalizer block:

    config.gem "td-logger"
    
== Configuration file

=== Direct Upload from Application Buffer

This configuration enables the application to upload the events directly from the application processes (app -> cloud) through the Treasure Data REST APIs. Please add this template +config/treasure_data.yml+ file and set your apikey:

    development:
      apikey: "YOUR_API_KEY"
      database: rails_development
      debug_mode: true  # enable debug mode
    
    production:
      apikey: "YOUR_API_KEY"
      database: rails_production
      debug_mode: false
    
    # disable logging
    test:

If you would wish to keep your API key as an environment variable, you can use this setting:

      apikey: <% ENV['TD_API_KEY'] %>

Alternatively, one can initialize the Ruby Logger module for direct upload straight from within the application:

    TreasureData::Logger.open('production',
                              :apikey=>"YOUR_API_KEY",
                              :auto_create_table=>true)
                              
Please refer to the {Ruby SDK documentation}[http://docs.treasuredata.com/articles/ruby-sdk] for more information.

=== Indirect Upload from td-agent

When 'agent' and 'tag' options are specified, the events are logged into the local td-agent daemon. Later on, the daemon uploads the event periodically to the cloud (app -> td-agent -> cloud).

This requires additional setup steps but lowers the memory and performance impact to your application processes. For the installation process, please look at our {knowledge base}[http://help.treasuredata.com/customer/portal/topics/550539-installing-td-agent/articles] page.

NOTE: This configuration is not supported on PaaS platforms.

    production:
      agent: "localhost:24224"
      tag: td.myapp
      debug_mode: false
      
== Logging events

You can log anytime using 'TD.event.post' method:

    TD.event.post('table_name', {:foo=>:bar})

== Rails extension

In rails application, you can use 'TD.event.attribute' to set static attribute to all events:

    class ApplicationController
      def authenticate
        # set 'uid' attribute to succeeding event logs
        TD.event.attribute[:uid] = 198
      end
    end

    class MyController < ApplicationController
      def mymethod
        authenticate()
        # this event includes 'uid' attribute
        TD.event.post('table_name', {:foo=>:bar})
      end
    end

=== Test mode

This mode uses TestLogger of fluent-logger-ruby to store the events.
If you want to enable this mode, then specify 'test_mode' in your configuration.

    development:
      apikey: "YOUR_API_KEY"
      database: rails_development
      debug_mode: true
      test_mode: true

You can access the logger instance via TD.logger to check the status.

    TD.logger.queue #=> [{},{},..]

== Further Readings

If you have any problem, please consult the knowledge based and ask us on the support site: 
{Support Site}[http://help.treasure-data.com].

== Copyright

Copyright:: Copyright (c) 2011 Treasure Data Inc.
License::   Apache License, Version 2.0
